{"remainingRequest":"/Users/joey/Projects/qwinto/client/node_modules/babel-loader/lib/index.js!/Users/joey/Projects/qwinto/client/node_modules/eslint-loader/index.js??ref--13-0!/Users/joey/Projects/qwinto/client/src/mixins/score.js","dependencies":[{"path":"/Users/joey/Projects/qwinto/client/src/mixins/score.js","mtime":1668154010658},{"path":"/Users/joey/Projects/qwinto/client/node_modules/cache-loader/dist/cjs.js","mtime":1668178923236},{"path":"/Users/joey/Projects/qwinto/client/node_modules/babel-loader/lib/index.js","mtime":1668178923523},{"path":"/Users/joey/Projects/qwinto/client/node_modules/eslint-loader/index.js","mtime":1668178923296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiL1VzZXJzL2pvZXkvUHJvamVjdHMvcXdpbnRvL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwpleHBvcnQgZGVmYXVsdCB7CiAgbWV0aG9kczogewogICAgc2NvcmVDaGVjazogZnVuY3Rpb24gc2NvcmVDaGVjayhmaWVsZCwgY29sb3IpIHsKICAgICAgdmFyIHBsYXllciA9IHRoaXMucm91bmREYXRhLmFjdGl2ZVBsYXllcjsKICAgICAgdmFyIHNjb3JlID0gdGhpcy5yb3VuZERhdGEuZGljZXMudG90YWw7IC8vIENvcHkgc2NvcmUgYXJyYXkgd2l0aCB0aGUgY3VycmVudCBzY29yZSBpbiBpdAoKICAgICAgdmFyIGNvcHlBcnJheSA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmdhbWVEYXRhW3BsYXllcl1bY29sb3JdKTsKCiAgICAgIGNvcHlBcnJheVtmaWVsZF0gPSBzY29yZTsgLy8gQ3JlYXRlIG5ldyBhcnJheSB3aXRob3V0IGVtcHR5IGVsZW1lbnRzCgogICAgICB2YXIgZmlsdGVyZWRBcnJheSA9IGNvcHlBcnJheS5maWx0ZXIoZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gbjsKICAgICAgfSk7IC8vIENoZWNrIGlmIGFycmF5IGlzIGFzY2VuZGluZwoKICAgICAgaWYgKHRoaXMuaXNTb3J0ZWQoZmlsdGVyZWRBcnJheSkpIHsKICAgICAgICAvLyBDaGVjayBpZiBudW1iZXIgaXMgbm90IHRoZSBzYW1lIGFzIGZpZWxkIGFib3ZlIG9yIGJlbG93CiAgICAgICAgaWYgKGNvbG9yID09PSAncmVkJyAmJiAoc2NvcmUgPT09IHRoaXMuZ2FtZURhdGFbcGxheWVyXS55ZWxsb3dbZmllbGRdIHx8IHNjb3JlID09PSB0aGlzLmdhbWVEYXRhW3BsYXllcl0ucHVycGxlW2ZpZWxkXSkpIHsKICAgICAgICAgIHJldHVybiAnYWxyZWFkeSBpbiBjb2x1bW4nOwogICAgICAgIH0gZWxzZSBpZiAoY29sb3IgPT09ICd5ZWxsb3cnICYmIChzY29yZSA9PT0gdGhpcy5nYW1lRGF0YVtwbGF5ZXJdLnJlZFtmaWVsZF0gfHwgc2NvcmUgPT09IHRoaXMuZ2FtZURhdGFbcGxheWVyXS5wdXJwbGVbZmllbGRdKSkgewogICAgICAgICAgcmV0dXJuICdhbHJlYWR5IGluIGNvbHVtbic7CiAgICAgICAgfSBlbHNlIGlmIChjb2xvciA9PT0gJ3B1cnBsZScgJiYgKHNjb3JlID09PSB0aGlzLmdhbWVEYXRhW3BsYXllcl0ucmVkW2ZpZWxkXSB8fCBzY29yZSA9PT0gdGhpcy5nYW1lRGF0YVtwbGF5ZXJdLnllbGxvd1tmaWVsZF0pKSB7CiAgICAgICAgICByZXR1cm4gJ2FscmVhZHkgaW4gY29sdW1uJzsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gJ25vdCBhc2NlbmRpbmcnOwogICAgfSwKICAgIGlzU29ydGVkOiBmdW5jdGlvbiBpc1NvcnRlZChhcnIpIHsKICAgICAgdmFyIGxpbWl0ID0gYXJyLmxlbmd0aCAtIDE7CiAgICAgIHJldHVybiBhcnIuZXZlcnkoZnVuY3Rpb24gKF8sIGkpIHsKICAgICAgICByZXR1cm4gaSA8IGxpbWl0ID8gYXJyW2ldIDwgYXJyW2kgKyAxXSA6IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIGNhbGNXaW5uaW5nQ29uZGl0aW9uczogZnVuY3Rpb24gY2FsY1dpbm5pbmdDb25kaXRpb25zKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkgewogICAgICAgIHZhciBmdWxsUm93cyA9IDA7IC8vIENyZWF0ZSBhcnJheSB3aXRoIGV2ZXJ5IHJvdyBjb2xvcgoKICAgICAgICB2YXIgY29sb3JBcnJheSA9IFsncmVkJywgJ3llbGxvdycsICdwdXJwbGUnXTsKICAgICAgICBjb2xvckFycmF5LmZvckVhY2goZnVuY3Rpb24gKGNvbG9yKSB7CiAgICAgICAgICB2YXIgZmlsdGVyZWRBcnJheSA9IF90aGlzLmdhbWVEYXRhW2ldW2NvbG9yXS5maWx0ZXIoZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgICB9KTsgLy8gSW5jcmVtZW50IGZ1bGxSb3dzIGlmIHJvdyBoYXMgOSBlbGVtZW50cwoKCiAgICAgICAgICBpZiAoZmlsdGVyZWRBcnJheS5sZW5ndGggPT09IDkpIHsKICAgICAgICAgICAgZnVsbFJvd3MrKzsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKGZ1bGxSb3dzID49IDIpIHsKICAgICAgICAgIF90aGlzLiRzdG9yZS5kaXNwYXRjaCgnc2V0R2FtZU92ZXInKTsKCiAgICAgICAgICBpZiAoX3RoaXMuZ2FtZVR5cGUgPT09ICdvbmxpbmUnKSB7CiAgICAgICAgICAgIF90aGlzLiRzdG9yZS5nZXR0ZXJzLnNvY2tldC5lbWl0KCdnYW1lT3ZlcicpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5udW1QbGF5ZXJzOyBpKyspIHsKICAgICAgICBfbG9vcChpKTsKICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/joey/Projects/qwinto/client/src/mixins/score.js"],"names":["methods","scoreCheck","field","color","player","roundData","activePlayer","score","dices","total","copyArray","gameData","filteredArray","filter","n","isSorted","yellow","purple","red","arr","limit","length","every","_","i","calcWinningConditions","fullRows","colorArray","forEach","$store","dispatch","gameType","getters","socket","emit","numPlayers"],"mappings":"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","sourcesContent":["export default {\n  methods: {\n    scoreCheck(field, color) {\n      let player = this.roundData.activePlayer;\n      let score = this.roundData.dices.total;\n      // Copy score array with the current score in it\n      let copyArray = [...this.gameData[player][color]];\n      copyArray[field] = score;\n      // Create new array without empty elements\n      let filteredArray = copyArray.filter(n => n);\n      // Check if array is ascending\n      if (this.isSorted(filteredArray)) {\n        // Check if number is not the same as field above or below\n        if (\n          color === 'red' &&\n          (score === this.gameData[player].yellow[field] || score === this.gameData[player].purple[field])\n        ) {\n          return 'already in column';\n        } else if (\n          color === 'yellow' &&\n          (score === this.gameData[player].red[field] || score === this.gameData[player].purple[field])\n        ) {\n          return 'already in column';\n        } else if (\n          color === 'purple' &&\n          (score === this.gameData[player].red[field] || score === this.gameData[player].yellow[field])\n        ) {\n          return 'already in column';\n        }\n        return true;\n      }\n      return 'not ascending';\n    },\n    isSorted(arr) {\n      const limit = arr.length - 1;\n      return arr.every((_, i) => (i < limit ? arr[i] < arr[i + 1] : true));\n    },\n    calcWinningConditions() {\n      for (let i = 0; i < this.numPlayers; i++) {\n        let fullRows = 0;\n        // Create array with every row color\n        let colorArray = ['red', 'yellow', 'purple'];\n        colorArray.forEach( color => {\n          let filteredArray = this.gameData[i][color].filter(n => n);\n          // Increment fullRows if row has 9 elements\n          if (filteredArray.length === 9) {\n            fullRows++;\n          }\n        });\n        if (fullRows >= 2) {\n          this.$store.dispatch('setGameOver')\n          if (this.gameType === 'online') {\n            this.$store.getters.socket.emit('gameOver');\n          }\n        }\n      }\n    }\n  },\n};\n"]}]}